import numpy as np
from scipy.linalg import expm

class QuantumSimulator:
    def __init__(self, num_qubits):
        self.num_qubits = num_qubits
        self.state = np.zeros(2 ** num_qubits, dtype=np.complex128)
        self.state[0] = 1  # Initialize with |0> state

    def apply_gate(self, gate_matrix):
        self.state = np.dot(gate_matrix, self.state)

    def simulate(self, gates):
        for gate in gates:
            self.apply_gate(gate)

    def measure(self):
        probabilities = np.abs(self.state) ** 2
        outcome = np.random.choice(range(len(self.state)), p=probabilities)
        state_index = np.binary_repr(outcome, width=self.num_qubits)
        return state_index

# Example usage:
num_qubits = 2
simulator = QuantumSimulator(num_qubits)
gate_Hadamard = 1 / np.sqrt(2) * np.array([[1, 1], [1, -1]])
gate_CNOT = np.array([[1, 0, 0, 0],
                      [0, 1, 0, 0],
                      [0, 0, 0, 1],
                      [0, 0, 1, 0]])

gates = [gate_Hadamard, gate_CNOT]
simulator.simulate(gates)
print("Measured state:", simulator.measure())
